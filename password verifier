<!DOCTYPE html>
<html>
<head>
  <title>Password Management System</title>
  <script type="text/javascript">
    // Define a class for a single node in a linked list
    class Node {
      constructor(element) {
        this.element = element;
        this.next = null; // Reference to the next node
      }
    }

    // Define a class for a singly linked list
    class LinkedList {
      constructor() {
        this.head = null; // Reference to the first node
        this.size = 0; // Number of elements in the list
      }

      // Add an element to the end of the list
      add(element) {
        var node = new Node(element);
        var currentNode;

        if (this.head == null)
          this.head = node;
        else {
          currentNode = this.head;
          while (currentNode.next) {
            currentNode = currentNode.next;
          }
          currentNode.next = node;
        }
        this.size++;
      }

      // Find an element in the list
      find(element) {
        var currentNode = this.head;
        while (currentNode) {
          if (currentNode.element == element)
            return true;
          currentNode = currentNode.next;
        }
        return false;
      }

      // Display all elements in the list
      display() {
        var currentNode = this.head;
        while (currentNode) {
          console.log(currentNode.element);
          currentNode = currentNode.next;
        }
      }
    }

    // Define a class for the Password System
    class PasswordSystem {
      constructor() {
        this.list = new LinkedList(); // Initialize a linked list to store password hashes
      }

      // A simple hashing function
      getHash(password) {
        for (var i = 0, h = 0xdeadbeef; i < password.length; i++)
          h = Math.imul(h ^ password.charCodeAt(i), 2654435761);
        return (h ^ h >>> 16) >>> 0;
      }

      // Save a password as a hash to the list
      savePassword(password) {
        var hash = this.getHash(password);
        this.list.add(hash);
        document.getElementById("saveMessage").innerHTML = "Password has been added to the list, type the same password in to the next box to see hash and if it's correct";
      }

      // Find a password and return the result
      findPassword(password) {
        var hash = this.getHash(password);
        document.getElementById("output").innerHTML = "The hash of the password: " + hash;
        return this.list.find(hash);
      }
    }

    var system = new PasswordSystem(); // Create a PasswordSystem object

    // Function to store password hash
    function storePasswordHash() {
      system.savePassword(document.getElementsByName("passwordToSave")[0].value);
    }

    // Function to check if a password exists
    function checkPassword() {
      if (system.findPassword(document.getElementsByName("passwordToCheck")[0].value)) {
        document.getElementById("findMessage").innerHTML = "Password found";
      } else {
        document.getElementById("findMessage").innerHTML = "Password not found";
      }
    }
  </script>
</head>
<body>
  <!-- User interface for storing and checking passwords -->
  <div>
    <input type="text" name="passwordToSave">
    <input type="submit" value="Submit" onclick="storePasswordHash()">
  </div>
  <p id="saveMessage"></p>
  <p id="output"></p>
  <div>
    Check For Password:
    <input type="text" name="passwordToCheck">
    <input type="submit" value="Submit" onclick="checkPassword()">
  </div>
  <p id="findMessage"></p>
</body>
</html>
